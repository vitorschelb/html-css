@charset "UTF-8";

body {
    font-family: "Vollkorn", Georgia, 'Times New Roman', Times, serif;
}

body, p, h1, ul, li, blockquote {
    padding: 0px;
    margin: 0px;
}

li {
    list-style: none;
}

a {
    text-decoration: none;
}

img {
    width: 100%;
    display: block; /*Tira os 4px padrão de espaçamento quando elas não estão com display block*/
    border-radius: 5px;
}

/* GRID GERAL */

.estrutura {
    display: grid;
    grid-template-columns: minmax(160px, 1fr) 3fr 300px;
    grid-template-areas:
        "header header header"
        "sidenav content anuncios"
        "footer footer footer";
}

@media (max-width:1200px) {
    .estrutura {
        grid-template-areas: 
        "header header header"
        "sidenav content content"
        "sidenav anuncios anuncios"
        "footer footer footer";
    }
}

@media (max-width:760px) {
    .estrutura {
        grid-template-columns: 100%;
        grid-template-areas: 
        "header"
        "sidenav"
        "content"
        "anuncios"
        "footer";
    }
}

/* HEADER */

.header {
    grid-area: header;
    background: linear-gradient(135deg, #8844ee, #B07DFB);
    padding: 30px;
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
}

.logo {
    max-width: 200px;
}

.header nav ul {
    display: flex;
    flex-wrap: wrap;
}

.header nav a {
    display: block;
    padding: 10px;
    color: white;
    font-size: 1.125em;
    background: rgba(0,0,0,.1);
    border-radius: 5px;
    transition: .1s;

}

.header nav a:hover {
    background: rgba(0,0,0,.5);
}

.header li + li { 
    /* Para resolver o mesmo problema que eu tinha nos meus projetos da margin passar pro responsivo errado, ele usa o adjacente, ou seja, todo li que vier após 1 li, ele quer adicionar isso. Ele não adiciona no primeiro, só os que vem em seguida */
    margin-left: 30px;
}

@media (max-width:760px) {
    .header {
        grid-template-columns: auto;
    }
    .logo {
        margin-bottom: 20px;
    }
    .header nav a {
        font-size: 1em;
    }
    .header li + li {
        margin-left: 30px;
    }
}

/* SIDENAV */

.sidenav {
    grid-area: sidenav;
    background: #fafbfc;
    padding: 30px;
}

.sidenav li a {
    display: block; /*Pq por padrão são elementos inline*/
    min-width: 60px;
    max-width: 100px;
    margin: 0 auto 30px auto; /*Pratica essa forma de margin*/
    background: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 5px 5px 15px 0px rgba(44,44,44,0.15); /*Reutilizar esses valores de sombreamento */
    transition: .1s ease-out;
}

.sidenav li a:hover {
    background: #B07DFB;
}

@keyframes seta {
    from {
        right: 30px;
    }
    to {
        right: 20px;
    }
}

@media (max-width:760px) {
    .sidenav {
        position: relative;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch; /*para manter o scrolling no touch com velocidade responsiva*/
        -ms-overflow-style: -ms-autohiding-scrollbar;
    }

    .sidenav::after {
        content: '→';
        position: absolute; /*Para a referencia ser meu sidenav, ou seja, a posição absoluta relativa a ele, é preciso setar o sidenav como relative, o absoluto é sempre relativo ao relative*/
        top: 5px;
        right: 30px;
        color: rgba(0,0,0,.3);
        animation: seta .5s ease-in 0s infinite alternate;
    }

    .sidenav ul {
        display: flex;
    }
    
    .sidenav ul li {
        flex: 1 0 60px;
    }
    
    .sidenav {
        padding: 0 30px;
    }

    .sidenav li a {
        margin: 30px 30px 30px 0px;
    }
}

/*CONTENT*/

.content {
    grid-area: content;
    max-width: 900px;
    margin: auto; /*Alinha o content ao centro*/
    padding: 30px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
}

.col-wide {
    grid-column: 1 / -1; /* O -1 pega de ponta a ponta, indiferente o numero de colunas adicionadas*/
}

.imagem-1 {
    grid-row: span 2; /*Usa o span, para indiferente o conteudo ele sempre vai expandir 2 linhas*/
    align-self: end;
}

.imagem-2 {
    align-self: end; /*Para evitar que o item mova*/
}

.imagem-3 {
    justify-self: stretch;
}

@media (max-width: 600px) {
    .content {
        grid-template-columns: auto;
    }
}

/*ESTILOS CONTENTE*/

p { /*Atenção na tipografia para deixar a navegação mais agradável, usar em outros projetos */
    font-size: 1.2em;
    line-height: 1.6;
    letter-spacing: -0.005em;
    color: rgba(0,0,0,.7);
}

.informacoes p + p { /*Aqui se usa a mesma tecnica do LI, se fala com o objeto adjacente, não se adiciona no primeiro, evitando a soma do gutter*/
    margin-top: 30px;
}

/*TITULO*/

.titulo {
    color: #B07DFB;
}

.titulo h1 { /*Atencao na tipografia */
    font-size: 3.17em;
    line-height: 1;
    font-weight: 700;
}

.titulo span {
    font-size: 0.875em; /*14px*/
}

/*CARACTERISTICAS*/

.caracteristicas {
    display: flex;
    align-items: flex-start; /*O padrao já é start*/
}

.caracteristicas > div { /*isso deternima que serão APENAS essas divs diretamente dentro da caracteristicas, não com as filhas das filhas */
    width: 80px;
    text-align: center;
    background: linear-gradient(135deg, #8844ee, #B07DFB);
    border-radius: 5px;
    box-shadow: 5px 5px 15px 0px rgba(44,44,44,0.15);
    position: relative; /*Para poder mover o rotulo e corrigir o vazamento de roxo*/
}

.caracteristicas > div:first-child{ /*Para falar apenas com a primeira div diretamente de caracteristicas */
    margin-right: 30px;
}

.caracteristicas span {
    display: block;
    color: #B07DFB;
}

.numero {
    font-size: 3em; /*16px*3*/
    line-height: 1; /*para não expandir*/
    margin: 10px auto; /*auto para alinha ao centro, de forma responsiva */
}

.rotulo {
    background: white;
    border-radius: 0 0 5px 5px;
    padding: 5px 0;
    position: relative;
    top: 2px; /*para corrigir o vazamento*/
}

.destaque {
    font-size: 0.87em;
    color: #B07DFB;
    max-width: 16em;
}

.citacao, .atributos {
    align-self: start; /*Para evitar que a box dos atributos se expanda vazia, ela segura e não permite fazer o strecht, a expansão por padrão */
    padding: 30px;
    border-radius: 5px;
    box-shadow: 5px 5px 15px 0px rgba(44,44,44,0.15);
    background: linear-gradient(135deg, #8844ee, #B07DFB);
}

.citacao p {
    font-size: 1.5em;
    font-style: italic;
    text-align: center;
    max-width: 500px; /*sempre lembrar de setar o maxwidth para telas maiores*/
    margin: 0 auto; /*para ficar sempre no centro do bloco, inclusive no responsivo, no greenblog por exemplo eu poderia ter usado isso*/
    color: white;
}

.atributos li{
    color: white;
    font-family: 'Courier New', Courier, monospace;
    font-size: 1.125em;
    padding: 15px;
}

.atributos li + li {
    border-top: 2px solid #B07DFB;
}

/*ANUNCIOS*/

.anuncios {
    grid-area: anuncios;
    background: #fafbfc;
    display: grid;
    align-content: start;
    padding: 30px;
    gap: 30px;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /*Aqui para resolver o problema do tamanho enorme dos anuncios, o auto fit determina para tentar colocar o maximo de colunas que der para no minimo 150px e no maximo 1fr. O auto fit fala o seguinte, para colocar o maximo de colunas de acordo com a especificação declarada*/ /*Estudar mais depois essa propriedade */
}

/*FOOTER*/

.footer {
    grid-area: footer;
    background: linear-gradient(135deg, #8844ee, #B07DFB);
}

.footer p {
    color: white;
    text-align: center;
    padding: 30px;
}